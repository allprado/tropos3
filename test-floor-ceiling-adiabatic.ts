import { generateIdf } from './src/services/idfGenerator';

// Teste para verificar piso e teto adiab√°ticos
const testDimensions = {
  width: 4.0,
  length: 3.0,
  height: 2.8
};

const testMaterials = {
  wall: 'concrete' as const,
  window: 'double_clear' as const,
  surface: 'tile' as const
};

const testWindowDimensions = {
  'window-1': { width: 1.5, height: 1.2, sillHeight: 0.9, enabled: false },
  'window-2': { width: 1.5, height: 1.2, sillHeight: 0.9, enabled: false },
  'window-3': { width: 1.5, height: 1.2, sillHeight: 0.9, enabled: false },
  'window-4': { width: 1.5, height: 1.2, sillHeight: 0.9, enabled: false },
};

const testOverhangProperties = {
  'window-1': { enabled: false, depth: 0.5, extensionLeft: 0.2, extensionRight: 0.2 },
  'window-2': { enabled: false, depth: 0.5, extensionLeft: 0.2, extensionRight: 0.2 },
  'window-3': { enabled: false, depth: 0.5, extensionLeft: 0.2, extensionRight: 0.2 },
  'window-4': { enabled: false, depth: 0.5, extensionLeft: 0.2, extensionRight: 0.2 },
};

console.log('üß™ === TESTE: PISO E TETO ADIAB√ÅTICOS ===');

// TESTE 1: Piso e teto normais (n√£o adiab√°ticos)
console.log('\nüìç TESTE 1: Superf√≠cies Normais');
const normalSurfaceProperties = {
  'floor': { isAdiabatic: false, windExposure: 'NoWind' as const, sunExposure: 'NoSun' as const },
  'ceiling': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-1': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-2': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-3': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-4': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
};

try {
  const normalIdf = generateIdf(
    testDimensions, 
    0, 
    testMaterials, 
    testWindowDimensions, 
    undefined, 
    testOverhangProperties, 
    normalSurfaceProperties
  );
  
  console.log('‚úÖ IDF normal gerado com sucesso!');
  
  // Verificar piso normal
  const floorNormalMatch = normalIdf.match(/GroundFloor,[\s\S]*?Ground/);
  console.log(`  Piso normal (Ground): ${floorNormalMatch ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar teto normal
  const ceilingNormalMatch = normalIdf.match(/Roof,[\s\S]*?Outdoors/);
  console.log(`  Teto normal (Outdoors): ${ceilingNormalMatch ? '‚úÖ' : '‚ùå'}`);
  
} catch (error) {
  console.error('‚ùå Erro ao gerar IDF normal:', error);
}

// TESTE 2: Piso e teto adiab√°ticos
console.log('\nüìç TESTE 2: Superf√≠cies Adiab√°ticas');
const adiabaticSurfaceProperties = {
  'floor': { isAdiabatic: true, windExposure: 'NoWind' as const, sunExposure: 'NoSun' as const },
  'ceiling': { isAdiabatic: true, windExposure: 'NoWind' as const, sunExposure: 'NoSun' as const },
  'wall-1': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-2': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-3': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-4': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
};

try {
  const adiabaticIdf = generateIdf(
    testDimensions, 
    0, 
    testMaterials, 
    testWindowDimensions, 
    undefined, 
    testOverhangProperties, 
    adiabaticSurfaceProperties
  );
  
  console.log('‚úÖ IDF adiab√°tico gerado com sucesso!');
  
  // Verificar piso adiab√°tico
  const floorAdiabaticMatch = adiabaticIdf.match(/GroundFloor,[\s\S]*?Adiabatic/);
  console.log(`  Piso adiab√°tico (Adiabatic): ${floorAdiabaticMatch ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar teto adiab√°tico
  const ceilingAdiabaticMatch = adiabaticIdf.match(/Roof,[\s\S]*?Adiabatic/);
  console.log(`  Teto adiab√°tico (Adiabatic): ${ceilingAdiabaticMatch ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar exposi√ß√µes do piso adiab√°tico
  const floorNoSunMatch = adiabaticIdf.match(/GroundFloor,[\s\S]*?NoSun/);
  const floorNoWindMatch = adiabaticIdf.match(/GroundFloor,[\s\S]*?NoWind/);
  console.log(`  Piso sem exposi√ß√£o solar: ${floorNoSunMatch ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Piso sem exposi√ß√£o ao vento: ${floorNoWindMatch ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar exposi√ß√µes do teto adiab√°tico
  const ceilingNoSunMatch = adiabaticIdf.match(/Roof,[\s\S]*?NoSun/);
  const ceilingNoWindMatch = adiabaticIdf.match(/Roof,[\s\S]*?NoWind/);
  console.log(`  Teto sem exposi√ß√£o solar: ${ceilingNoSunMatch ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Teto sem exposi√ß√£o ao vento: ${ceilingNoWindMatch ? '‚úÖ' : '‚ùå'}`);
  
} catch (error) {
  console.error('‚ùå Erro ao gerar IDF adiab√°tico:', error);
}

// TESTE 3: Apenas piso adiab√°tico
console.log('\nüìç TESTE 3: Apenas Piso Adiab√°tico');
const mixedSurfaceProperties = {
  'floor': { isAdiabatic: true, windExposure: 'NoWind' as const, sunExposure: 'NoSun' as const },      // Adiab√°tico
  'ceiling': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const }, // Normal
  'wall-1': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-2': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-3': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
  'wall-4': { isAdiabatic: false, windExposure: 'WindExposed' as const, sunExposure: 'SunExposed' as const },
};

try {
  const mixedIdf = generateIdf(
    testDimensions, 
    0, 
    testMaterials, 
    testWindowDimensions, 
    undefined, 
    testOverhangProperties, 
    mixedSurfaceProperties
  );
  
  console.log('‚úÖ IDF misto gerado com sucesso!');
  
  const floorAdiabaticMixedMatch = mixedIdf.match(/GroundFloor,[\s\S]*?Adiabatic/);
  const ceilingNormalMixedMatch = mixedIdf.match(/Roof,[\s\S]*?Outdoors/);
  console.log(`  Piso adiab√°tico: ${floorAdiabaticMixedMatch ? '‚úÖ' : '‚ùå'}`);
  console.log(`  Teto normal: ${ceilingNormalMixedMatch ? '‚úÖ' : '‚ùå'}`);
  
} catch (error) {
  console.error('‚ùå Erro ao gerar IDF misto:', error);
}

console.log('\nüéØ Teste conclu√≠do!');
